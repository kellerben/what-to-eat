openapi: 3.0.1
info:
  title: Lunch
  description: Just an app to organize lunch
  license:
    name: GNU AGPL 3.0
    url: https://www.gnu.org/licenses/agpl-3.0.html
  version: 1.0.0
servers:
- url: /api
paths:
  /order:
    post:
      tags:
      - Order
      summary: Order lunch
      operationId: orderLunch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mealOrder'
      responses:
        400:
          description: Duplicate Order
          content: {}
        405:
          description: Invalid input
          content: {}
    put:
      tags:
      - Order
      summary: Change price, special request or state of an order
      operationId: updateOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mealOrder'
      responses:
        400:
          description: Invalid UserID supplied
          content: {}
        404:
          description: User didn't ordered anything yet
          content: {}
        405:
          description: Validation exception
          content: {}
  /fetchFood:
    post:
      tags:
      - Fetch
      summary: I will walk to the shop
      operationId: announceShop
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shopAnnouncement'
      responses:
        400:
          description: Duplicate Announcement
          content: {}
        405:
          description: Invalid input
          content: {}
    delete:
      tags:
      - Fetch
      summary: I will not walk to the shop
      operationId: deleteShopAnnouncement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shopAnnouncement'
      responses:
        405:
          description: Invalid input
          content: {}
    get:
      tags:
      - Fetch
      summary: Get all shop announcements
      operationId: getShopAnnouncements
      parameters:
      - name: community
        in: query
        description: The community string
        required: true
        schema:
          type: string
          maxLength: 64
      - name: date
        in: query
        description: For which day do you want to get the shop announcements?
        schema:
          type: string
          format: date
      responses:
        404:
          description: No Announcements done yet
          content: {}
        405:
          description: Invalid input
          content: {}
  /{community}/getOrdersOfDay:
    get:
      tags:
      - Order
      summary: Get all orders of one day
      operationId: getOrdersOfDay
      parameters:
      - name: community
        in: path
        description: The community string
        required: true
        schema:
          type: string
          maxLength: 64
      - name: date
        in: query
        description: For which day do you want to get the orders?
        schema:
          type: string
          format: date
      responses:
        404:
          description: Nothing ordered yet
          content: {}
        405:
          description: Validation exception
          content: {}
  /{community}/{shopId}/getShopOrders:
    get:
      tags:
      - Order
      summary: Get all orders of one shop
      operationId: getShopOrders
      parameters:
      - name: community
        in: path
        description: The community string
        required: true
        schema:
          type: string
          maxLength: 64
      - name: shopId
        in: path
        description: Which shop orders do you want to have?
        required: true
        schema:
          type: string
          maxLength: 64
      - name: date
        in: query
        description: For which day do you want to get the orders?
        schema:
          type: string
          format: date
      responses:
        404:
          description: Nothing ordered yet
          content: {}
        405:
          description: Validation exception
          content: {}
  /{community}/allShops:
    get:
      tags:
      - Shop
      summary: Get all known shops
      operationId: getShops
      parameters:
      - name: community
        in: path
        description: The community string
        required: true
        schema:
          type: string
          maxLength: 64
      responses:
        405:
          description: Validation exception
          content: {}
  /{community}/{shopId}/menu:
    get:
      tags:
      - Shop
      summary: Get the shop's menu
      operationId: getMenu
      parameters:
      - name: community
        in: path
        description: The community string
        required: true
        schema:
          type: string
          maxLength: 64
      - name: shopId
        in: path
        description: The menu of which shop do you want to have?
        required: true
        schema:
          type: string
          maxLength: 64
      responses:
        405:
          description: Validation exception
          content: {}
  /{community}/{shopId}/specialRequests:
    get:
      tags:
      - Shop
      summary: Get typical special requests of the shop
      operationId: getSpecialRequests
      parameters:
      - name: community
        in: path
        required: true
        description: The community string.
        schema:
          type: string
          maxLength: 64
      - name: shopId
        in: path
        description: The typical special requests of which shop do you want to have?
        required: true
        schema:
          type: string
          maxLength: 64
      responses:
        405:
          description: Validation exception
          content: {}
  /{community}/{shopId}/{meal}/price:
    get:
      tags:
      - Shop
      summary: Get price of a meal
      operationId: getPrice
      parameters:
      - name: community
        in: path
        required: true
        description: The community string.
        schema:
          type: string
          maxLength: 64
      - name: shopId
        in: path
        description: Which shop offers the meal?
        required: true
        schema:
          type: string
          maxLength: 64
      - name: meal
        in: path
        description: Which meal-price do you want to have?
        required: true
        schema:
          type: string
          maxLength: 64
      responses:
        404:
          description: Price not found
          content: {}
        405:
          description: Validation exception
          content: {}
  /{community}/{shopId}/{meal}/{price}/price:
    post:
      tags:
      - Shop
      summary: Set price of a meal
      operationId: setPrice
      parameters:
      - name: community
        in: path
        required: true
        description: The community string.
        schema:
          type: string
          maxLength: 64
      - name: meal
        in: path
        description: Which meal-price do you want to set?
        required: true
        schema:
          type: string
          maxLength: 64
      - name: shopId
        in: path
        description: Which shop offers the meal?
        required: true
        schema:
          type: string
          maxLength: 64
      - name: price
        in: path
        description: The price of the meal
        required: true
        schema:
          type: number
          format: int32
      responses:
        405:
          description: Validation exception
          content: {}
  /{community}/{shopId}/details:
    get:
      tags:
      - Shop
      summary: Get the shop's metadata
      operationId: getShopData
      parameters:
      - name: community
        in: path
        required: true
        description: The community string.
        schema:
          type: string
          maxLength: 64
      - name: shopId
        in: path
        description: The Metadata of which shop do you want to have?
        required: true
        schema:
          type: string
          maxLength: 64
      responses:
        405:
          description: Validation exception
          content: {}
    post:
      tags:
      - Shop
      summary: Set the shop's metadata
      operationId: setShopData
      parameters:
      - name: community
        in: path
        required: true
        description: The community string.
        schema:
          type: string
          maxLength: 64
      - name: shopId
        in: path
        description: The Metadata of the shop you want to set
        required: true
        schema:
          type: string
          maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shopMetaData'
      responses:
        405:
          description: Validation exception
          content: {}
  /{community}/getPayments:
    get:
      parameters:
      - name: community
        in: path
        required: true
        description: The community string.
        schema:
          type: string
          maxLength: 64
      - name: from
        in: query
        required: false
        description: Payment sender
        schema:
          type: string
          maxLength: 64
      - name: to
        in: query
        required: false
        description: Payment receiver
        schema:
          type: string
          maxLength: 64
      - name: states
        in: query
        required: false
        description: Show only payments of these states
        schema:
          type: array
          items:
            type: string
            maxLength: 16
            pattern: '^(NEW|FETCHED|PAYED|DISCARDED)$'
      tags:
      - Payments
      summary: Get open or closed payments
      operationId: getPayments
      responses:
        405:
          description: Validation exception
          content: {}
  /{community}/{userId}/paymentInstructions:
    get:
      tags:
      - User
      summary: Get the payment information of a user
      operationId: getPaymentInstructions
      parameters:
        - name: community
          in: path
          required: true
          description: The community string.
          schema:
            type: string
            maxLength: 64
        - name: userId
          in: path
          required: true
          description: The user
          schema:
            type: string
            maxLength: 64
      responses:
        405:
          description: Validation exception
          content: {}
    post:
      tags:
      - User
      summary: Set the payment information of the user
      operationId: setPaymentInstructions
      parameters:
        - name: community
          in: path
          required: true
          description: The community string.
          schema:
            type: string
            maxLength: 64
        - name: userId
          in: path
          required: true
          description: The user
          schema:
            type: string
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paymentInstructions'
      responses:
        400:
          description: Duplicate Announcement
          content: {}
        405:
          description: Invalid input
          content: {}
  /{community}/{userId}/email:
    put:
      tags:
      - User
      summary: Set the email of the user
      operationId: setEmail
      parameters:
        - name: community
          in: path
          required: true
          description: The community string.
          schema:
            type: string
            maxLength: 64
        - name: userId
          in: path
          required: true
          description: The user
          schema:
            type: string
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/email'
      responses:
        405:
          description: Invalid input
          content: {}
  /{community}:
    get:
      tags:
      - Community
      summary: Get the community information
      operationId: getCommunityInformation
      parameters:
        - name: community
          in: path
          required: true
          description: The community string.
          schema:
            type: string
            maxLength: 64
      responses:
        405:
          description: Validation exception
          content: {}
    post:
      tags:
      - Community
      summary: Set the community information
      operationId: setCommunityInformation
      parameters:
        - name: community
          in: path
          required: true
          description: The community string.
          schema:
            type: string
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/communityInformation'
      responses:
        405:
          description: Invalid input
          content: {}

components:
  schemas:
    mealOrder:
      type: object
      properties:
        community:
          type: string
          maxLength: 64
          description: The community string.
        shopId:
          type: string
          maxLength: 64
          description: Where do you want to get it from?
        userId:
          type: string
          maxLength: 64
          description: Who wants to order something?
        meal:
          type: string
          maxLength: 64
          description: What do you want to have?
        price:
          type: number
          format: int32
          description: Expected price
        date:
          type: string
          description: For which day is your order?
          format: date
        specialRequest:
          type: string
          maxLength: 64
          description: Any specialties?
        state:
          type: string
          pattern: '^(NEW|FETCHED|PAYED|DISCARDED)$'
          maxLength: 16
          description: In which state is the Order? (NEW, FETCHED, PAYED, DISCARDED)
      required:
        - community
        - shopId
        - userId
        - meal
    shopAnnouncement:
      type: object
      properties:
        community:
          type: string
          maxLength: 64
          description: The community string.
        userId:
          description: Who wants to order something?
          type: string
          maxLength: 64
        shopId:
          description: Where do you want to get it from?
          type: string
          maxLength: 64
        date:
          type: string
          description: For which day is your order?
          format: date
      required:
        - community
        - userId
        - shopId
    shopMetaData:
      type: object
      properties:
        distance:
          description: The distance in meter
          type: number
          format: int32
        phone:
          description: The Phone number
          type: string
          maxLength: 50
          pattern: '^[+0-9 ()-]*$'
        lat:
          description: The geographical latitude
          type: number
          format: float
          minimum: -90
          maximum: 90
        lng:
          description: The geographical longitude
          type: number
          format: float
          minimum: -180
          maximum: 180
        comment:
          type: string
          maxLength: 5000
          description: a comment
    paymentInstructions:
      type: object
      properties:
        paymentInstructions:
          type: string
          maxLength: 5000
          description: The information, how money can be payed
    email:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 500
          description: The e-mail of the user
    communityInformation:
      type: object
      properties:
        address:
          type: string
          maxLength: 500
          description: The address of the community
        lat:
          description: The geographical latitude
          type: number
          format: float
          minimum: -90
          maximum: 90
        lng:
          description: The geographical longitude
          type: number
          format: float
          minimum: -180
          maximum: 180
